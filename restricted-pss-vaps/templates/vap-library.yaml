{{- range tuple "containers" "initContainers" "ephemeralContainers" }}
---
{{ include "restricted-pss-vaps.vap" (dict 
  "name" "kubescape-c-0016-allow-privilege-escalation"
  "message" "Must disable privilege escalation (see more at https://hub.armosec.io/docs/c-0016)"
  "resource" .
  "hasParams" false
  "podExpression" (include "containerCheckExpressions.privilegeEscalation" "container")
  "deploymentExpression" (include "containerCheckExpressions.privilegeEscalation" "container")
  "jobExpression" (include "containerCheckExpressions.privilegeEscalation" "container") 
)}}
---
{{ include "restricted-pss-vaps.vap" (dict 
  "name" "kubescape-c-0057-privileged-container-denied"
  "message" "Pod has one or more privileged containers.(see more at https://hub.armosec.io/docs/c-0057)"
  "resource" .
  "hasParams" false
  "podExpression" (include "containerCheckExpressions.privilegedContainer" "container")
  "deploymentExpression" (include "containerCheckExpressions.privilegedContainer" "container")
  "jobExpression" (include "containerCheckExpressions.privilegedContainer" "container") 
)}}
---
{{ include "restricted-pss-vaps.vap" (dict 
  "name" "adding-insecure-capabilities"
  "message" "Adding insecure capabilities"
  "resource" .
  "hasParams" true
  "podExpression" (include "containerCheckExpressions.allowedCapabilities" "container")
  "deploymentExpression" (include "containerCheckExpressions.allowedCapabilities" "container")
  "jobExpression" (include "containerCheckExpressions.allowedCapabilities" "container") 
)}}
---
{{ include "restricted-pss-vaps.vap" (dict 
  "name" "must-drop-capabilities"
  "message" "Must drop all capabilities"
  "resource" .
  "hasParams" false
  "podExpression" (include "containerCheckExpressions.dropCapabilities" "container")
  "deploymentExpression" (include "containerCheckExpressions.dropCapabilities" "container")
  "jobExpression" (include "containerCheckExpressions.dropCapabilities" "container") 
)}}
---
{{ include "restricted-pss-vaps.vap" (dict 
  "name" "kubescape-c-0044-deny-resources-with-host-port"
  "message" "One or more containers in the Pod has Host-port! (see more at https://hub.armosec.io/docs/c-0044)"
  "resource" .
  "hasParams" false
  "podExpression" (include "containerCheckExpressions.hostPort" "container")
  "deploymentExpression" (include "containerCheckExpressions.hostPort" "container")
  "jobExpression" (include "containerCheckExpressions.hostPort" "container") 
)}}
{{- end }}

{{- range tuple "containers" "initContainers" "ephemeralContainers" "pod" }}

{{ $podArg := ternary "object.spec" "container" (eq "pod" .) -}}
{{ $deploymentArg := ternary "object.spec.template.spec" "container" (eq "pod" .) -}}
{{ $jobArg := ternary "object.spec.jobTemplateSpec.spec.template.spec" "container" (eq "pod" .) -}}
---
{{ include "restricted-pss-vaps.vap" (dict 
  "name" "not-overriding-apparmor"
  "message" "AppArmor profile types must not be set to Unconfined"
  "resource" .
  "hasParams" false
  "podExpression" (include "containerCheckExpressions.appArmor" $podArg)
  "deploymentExpression" (include "containerCheckExpressions.appArmor" $deploymentArg)
  "jobExpression" (include "containerCheckExpressions.appArmor" $jobArg) 
)}}
---
{{ include "restricted-pss-vaps.vap" (dict 
  "name" "run-as-non-root"
  "message" "Must explicitly set runAsNonRoot in securityContext"
  "resource" .
  "hasParams" false
  "podExpression" (include "containerCheckExpressions.runAsNonRoot" (dict "resource" $podArg "extra" "(has(object.spec.securityContext) && has(object.spec.securityContext.runAsNonRoot) && object.spec.securityContext.runAsNonRoot == true)"))
  "deploymentExpression" (include "containerCheckExpressions.runAsNonRoot" (dict "resource" $deploymentArg "extra" "(has(object.spec.template.spec.securityContext) && has(object.spec.template.spec.securityContext.runAsNonRoot) && object.spec.template.spec.securityContext.runAsNonRoot == true)"))
  "jobExpression" (include "containerCheckExpressions.runAsNonRoot" (dict "resource" $jobArg "extra" "(has(object.spec.jobTemplate.spec.template.spec.securityContext) && has(object.spec.jobTemplate.spec.template.spec.securityContext.runAsNonRoot) && object.spec.jobTemplate.spec.template.spec.securityContext.runAsNonRoot == true)"))
)}}
---
{{ include "restricted-pss-vaps.vap" (dict 
  "name" "non-root-user"
  "message" "securityContext.runAsUser must not be set to 0"
  "resource" .
  "hasParams" false
  "podExpression" (include "containerCheckExpressions.nonRootUser" $podArg)
  "deploymentExpression" (include "containerCheckExpressions.nonRootUser" $deploymentArg)
  "jobExpression" (include "containerCheckExpressions.nonRootUser" $jobArg) 
)}}
---

{{- end }}


---
{{ include "restricted-pss-vaps.vap" (dict 
  "name" "kubescape-c-0041-deny-resources-with-host-network-access"
  "message" "Pods with hostNetwork enabled may cause security issues. (see more at https://hub.armosec.io/docs/c-0041)"
  "resource" "pod"
  "hasParams" false
  "podExpression" (include "containerCheckExpressions.hostNetwork" "object.spec")
  "deploymentExpression" (include "containerCheckExpressions.hostNetwork" "object.spec.template.spec")
  "jobExpression" (include "containerCheckExpressions.hostNetwork" "object.spec.jobTemplate.spec.template.spec") 
)}}
---
{{ include "restricted-pss-vaps.vap" (dict 
  "name" "kubescape-c-0038-deny-resources-with-host-ipc-or-pid-privileges"
  "message" "Pods with hostPID and hostIPC fields enabled may allow cross-container influence. (see more at https://hub.armosec.io/docs/c-0038)"
  "resource" "pod"
  "hasParams" false
  "podExpression" (include "containerCheckExpressions.hostIpcPid" "object.spec")
  "deploymentExpression" (include "containerCheckExpressions.hostIpcPid" "object.spec.template.spec")
  "jobExpression" (include "containerCheckExpressions.hostIpcPid" "object.spec.jobTemplate.spec.template.spec") 
)}}
---
{{ include "restricted-pss-vaps.vap" (dict 
  "name" "kubescape-c-0048-deny-workloads-with-hostpath-mounts"
  "message" "There are one or more hostPath mounts in the Pod! (see more at https://hub.armosec.io/docs/c-0048)"
  "resource" "pod"
  "hasParams" false
  "podExpression" (include "containerCheckExpressions.hostPathVolumes" "object.spec")
  "deploymentExpression" (include "containerCheckExpressions.hostPathVolumes" "object.spec.template.spec")
  "jobExpression" (include "containerCheckExpressions.hostPathVolumes" "object.spec.jobTemplate.spec.template.spec") 
)}}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: apparmor-annotation
spec:
{{- template "restricted-pss-vaps.pod-resource-preamble" }}
  validations:
  - expression: |
     !has(object.metadata.annotations) || object.metadata.annotations.filter(annotation, annotation.matches("container.apparmor.security.beta.kubernetes.io/*")).all(currentAnnotation, object.metadata.annotations[currentAnnotation] != "Unconfined")
    message: Must not set annotations["container.apparmor.security.beta.kubernetes.io/*"] to 'Unconfined'