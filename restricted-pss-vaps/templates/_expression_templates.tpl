{{- define "containerCheckExpressions.allowedCapabilities" }}!has({{ . }}.securityContext) || !has({{ . }}.securityContext.capabilities) || !has({{ . }}.securityContext.capabilities.add) || {{ . }}.securityContext.capabilities.add.all(cap, params.allowedCapabilities.exists(allowedCap, cap == allowedCap)){{- end }}
{{- define "containerCheckExpressions.dropCapabilities" }}has({{ . }}.securityContext) && has({{ . }}.securityContext.capabilities) && has({{ . }}.securityContext.capabilities.drop) && {{ . }}.securityContext.capabilities.drop.exists(cap, cap == 'ALL'){{- end }}
{{- define "containerCheckExpressions.appArmor" }}!has({{ . }}.securityContext) || !has({{ . }}.securityContext.appArmorProfile) || !has({{ . }}.securityContext.appArmorProfile.type) || {{ . }}.securityContext.appArmorProfile.type != 'Unconfined'{{- end }}
{{- define "containerCheckExpressions.runAsNonRoot" }}(has({{ .resource }}.securityContext) && has({{ .resource }}.securityContext.runAsNonRoot) && {{ .resource }}.securityContext.runAsNonRoot == true){{ if eq .resource "container" }} || ( {{ .extra }} && (!has({{ .resource }}.securityContext) || !has({{ .resource }}.securityContext.runAsNonRoot) ) ){{ end }}{{- end }}
{{- define "containerCheckExpressions.nonRootUser" }}!has({{ . }}.securityContext) || !has({{ . }}.securityContext.runAsUser) || {{ . }}.securityContext.runAsUser != 0{{- end }}